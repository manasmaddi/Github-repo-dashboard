@page "/"
@inject github_dashboard.Services.GitHubService GitHubService
@attribute [Authorize]

<PageTitle>GitHub Dashboard</PageTitle>

<h1>Your Repositories</h1>

@switch (pageState)
{
    case PageState.Loading:
        <div class="loading-indicator">
            <div class="spinner"></div>
            <p>Loading repositories...</p>
        </div>
        break;

    case PageState.Error:
        <div class="alert alert-danger">
            <strong>Error:</strong> Could not load repositories. Please try again later.
        </div>
        break;

    case PageState.Loaded when repositories != null && repositories.Any():
        <div class="repo-grid">
            @foreach (var repo in repositories)
            {
                <a href="/repo/@repo.Id" class="repo-card-link">
                    <div class="repo-card">
                        <h5>@repo.Name</h5>
                        <p>@repo.Description</p>
                        <div class="repo-stats">
                            <span>⭐ @repo.Stars</span>
                            <span><svg height="16" aria-hidden="true" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-repo-forked"><path d="M5 5.372v.878c0 .414.336.75.75.75h4.5a.75.75 0 0 0 .75-.75v-.878a2.25 2.25 0 1 1 1.5 0v.878a2.25 2.25 0 0 1-2.25 2.25h-4.5A2.25 2.25 0 0 1 3.5 6.25v-.878a2.25 2.25 0 1 1 1.5 0ZM5 3.25a.75.75 0 1 0-1.5 0 .75.75 0 0 0 1.5 0Zm6.5.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5Z"></path></svg> @repo.Forks</span>
                            <span>⚠️ @repo.OpenIssues</span>
                        </div>
                        <div class="repo-footer">
                            <small>Last push: @repo.LastPush.ToLocalTime().ToString("MMM dd, yyyy")</small>
                        </div>
                    </div>
                </a>
            }
        </div>
        break;

    case PageState.Loaded:
        <p>No repositories found for your account.</p>
        break;
}


@code {
    // Enterprise Best Practice: Use a dedicated enum for managing the component's state.
    // This is clearer and more scalable than using multiple boolean flags.
    private enum PageState { Loading, Loaded, Error }
    private PageState pageState = PageState.Loading;

    private IEnumerable<Data.Repository>? repositories;

    protected override async Task OnInitializedAsync()
    {
        await LoadRepositoriesAsync();
    }

    /// <summary>
    /// Encapsulates the logic for loading repositories, including state management and error handling.
    /// This makes the code cleaner and allows for easy reusability (e.g., a refresh button).
    /// </summary>
    private async Task LoadRepositoriesAsync()
    {
        pageState = PageState.Loading;
        try
        {
            repositories = await GitHubService.GetUserRepositoriesAsync();
            pageState = PageState.Loaded;
        }
        catch (Exception ex)
        {
            // In a real application, you would inject ILogger and log the full exception `ex` here.
            // For example: _logger.LogError(ex, "Failed to load user repositories.");
            pageState = PageState.Error;
        }
    }
}

